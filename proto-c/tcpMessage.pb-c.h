/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tcpMessage.proto */

#ifndef PROTOBUF_C_tcpMessage_2eproto__INCLUDED
#define PROTOBUF_C_tcpMessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "sec1.pb-c.h"

typedef struct _TCPMESSAGE__RelayConfig TCPMESSAGE__RelayConfig;
typedef struct _TCPMESSAGE__Message TCPMESSAGE__Message;


/* --- enums --- */

typedef enum _TCPMESSAGE__PayloadType {
  TCP__MESSAGE__PAYLOAD_TYPE__Alive_Request = 0,
  TCP__MESSAGE__PAYLOAD_TYPE__Alive_Response = 1,
  TCP__MESSAGE__PAYLOAD_TYPE__Relay_Command_Request = 2,
  TCP__MESSAGE__PAYLOAD_TYPE__Relay_Command_Response = 3,
  TCP__MESSAGE__PAYLOAD_TYPE__Relay_Status_Request = 4,
  TCP__MESSAGE__PAYLOAD_TYPE__Relay_Status_Response = 5,
  TCP__MESSAGE__PAYLOAD_TYPE__Security_Session_Request = 6,
  TCP__MESSAGE__PAYLOAD_TYPE__Security_Session_Response = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TCP__MESSAGE__PAYLOAD_TYPE)
} TCPMESSAGE__PayloadType;

/* --- messages --- */

struct  _TCPMESSAGE__RelayConfig
{
  ProtobufCMessage base;
  int32_t relayid;
  protobuf_c_boolean relaystatus;
};
#define TCP__MESSAGE__RELAY_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tcp__message__relay_config__descriptor) \
    , 0, 0 }


struct  _TCPMESSAGE__Message
{
  ProtobufCMessage base;
  TCPMESSAGE__PayloadType type;
  protobuf_c_boolean aliveresponse;
  size_t n_relayconfig;
  TCPMESSAGE__RelayConfig **relayconfig;
  Sec1Payload *sec1;
};
#define TCP__MESSAGE__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tcp__message__message__descriptor) \
    , TCP__MESSAGE__PAYLOAD_TYPE__Alive_Request, 0, 0,NULL, NULL }


/* TCPMESSAGE__RelayConfig methods */
void   tcp__message__relay_config__init
                     (TCPMESSAGE__RelayConfig         *message);
size_t tcp__message__relay_config__get_packed_size
                     (const TCPMESSAGE__RelayConfig   *message);
size_t tcp__message__relay_config__pack
                     (const TCPMESSAGE__RelayConfig   *message,
                      uint8_t             *out);
size_t tcp__message__relay_config__pack_to_buffer
                     (const TCPMESSAGE__RelayConfig   *message,
                      ProtobufCBuffer     *buffer);
TCPMESSAGE__RelayConfig *
       tcp__message__relay_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tcp__message__relay_config__free_unpacked
                     (TCPMESSAGE__RelayConfig *message,
                      ProtobufCAllocator *allocator);
/* TCPMESSAGE__Message methods */
void   tcp__message__message__init
                     (TCPMESSAGE__Message         *message);
size_t tcp__message__message__get_packed_size
                     (const TCPMESSAGE__Message   *message);
size_t tcp__message__message__pack
                     (const TCPMESSAGE__Message   *message,
                      uint8_t             *out);
size_t tcp__message__message__pack_to_buffer
                     (const TCPMESSAGE__Message   *message,
                      ProtobufCBuffer     *buffer);
TCPMESSAGE__Message *
       tcp__message__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tcp__message__message__free_unpacked
                     (TCPMESSAGE__Message *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TCPMESSAGE__RelayConfig_Closure)
                 (const TCPMESSAGE__RelayConfig *message,
                  void *closure_data);
typedef void (*TCPMESSAGE__Message_Closure)
                 (const TCPMESSAGE__Message *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    tcp__message__payload_type__descriptor;
extern const ProtobufCMessageDescriptor tcp__message__relay_config__descriptor;
extern const ProtobufCMessageDescriptor tcp__message__message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tcpMessage_2eproto__INCLUDED */
